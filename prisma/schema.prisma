// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id            Int           @id @default(autoincrement())
  phone         String        @unique
  email         String        @unique
  fullName      String
  gender        Gender
  major         String?
  dob           DateTime?
  graduatedDate Int
  gpa           Float?
  address       String?
  status        StudentStatus
  reCer         String?
  joinedDate    DateTime      @default(now())
  university    String?
  classCode     Int?

  currentClass   Class?         @relation(fields: [classCode], references: [id])
  studentClasses StudentClass[]
  reservation    Reservation?
}

model Reservation {
  id        Int @id @default(autoincrement())
  classId   Int
  studentId Int @unique

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

model User {
  id       Int    @id @default(autoincrement())
  role     Role
  fullName String

  createdClasses Class[] @relation("CreatedClasses")
  updatedClasses Class[] @relation("UpdatedClasses")
  managedClass   Class[]
}

model Program {
  id Int @id @default(autoincrement())

  classes Class[]
}

model Class {
  id            Int         @id @default(autoincrement())
  className     String      @unique
  startDate     DateTime
  endDate       DateTime?
  createdDate   DateTime    @default(now())
  createdUserId Int
  updatedDate   DateTime?
  updatedUserId Int?
  duration      String
  location      String
  status        ClassStatus
  programId     Int

  managers       User[]
  program        Program        @relation(fields: [programId], references: [id])
  createdUser    User           @relation(name: "CreatedClasses", fields: [createdUserId], references: [id])
  updatedUser    User?          @relation(name: "UpdatedClasses", fields: [updatedUserId], references: [id])
  students       Student[]
  studentClasses StudentClass[]
  reservations   Reservation[]
}

model StudentClass {
  classId           Int
  studentId         Int
  attendingStatus   AttendingStatus
  certificateStatus CertificateStatus
  certificateDate   DateTime?

  class   Class   @relation(fields: [classId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@id([classId, studentId])
}

enum Gender {
  Male
  Female
  Other
}

enum StudentStatus {
  Active
  InActive
  Disable
}

enum ClassStatus {
  Active
  InActive
  Disable
}

enum AttendingStatus {
  InClass
  Reserve
  Finish
  DropOut
}

enum CertificateStatus {
  Enable
  Disable
}

enum Role {
  SuperAdmin
  ClassAdmin
  Trainer
}
