// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id            Int           @id @default(autoincrement())
  phone         String        @unique
  email         String        @unique
  fullName      String
  gender        Gender
  major         String?
  dob           DateTime?
  graduatedDate Int
  gpa           Float?
  address       String?
  status        StudentStatus
  reCer         String?
  joinedDate    DateTime      @default(now())
  university    String?
  classCode     Int?

  currentClass        Class?               @relation(fields: [classCode], references: [id])
  studentClasses      StudentClass[]
  reservation         Reservation?
  studentClassModules StudentClassModule[]
  scores              Score[]
  emailRecipients     EmailRecipient[]
}

model Reservation {
  // id        Int      @id @default(autoincrement())
  classId   Int
  studentId Int      @unique
  reason    String
  startDate DateTime
  endDate   DateTime

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  @@id([classId, studentId])
}

model User {
  id       Int    @id @default(autoincrement())
  role     Role
  fullName String

  createdClasses        Class[]          @relation("CreatedClasses")
  updatedClasses        Class[]          @relation("UpdatedClasses")
  createdPrograms       Program[]        @relation("CreatedPrograms")
  updatedPrograms       Program[]        @relation("UpdatedPrograms")
  createdModules        Module[]         @relation("CreatedModules")
  updatedModules        Module[]         @relation("UpdatedModules")
  createdAssignments    Assignment[]     @relation("CreatedAssignments")
  updatedAssignments    Assignment[]     @relation("UpdatedAssignments")
  createdEmailTemplates EmailTemplate[]  @relation("CreatedEmailTemplates")
  updatedEmailTemplates EmailTemplate[]  @relation("UpdatedEmailTemplates")
  managedClass          Class[]
  emailSends            EmailSend[]
  emailRecipients       EmailRecipient[]
}

model Program {
  id            Int       @id @default(autoincrement())
  programName   String
  createdDate   DateTime  @default(now())
  createdUserId Int
  updatedDate   DateTime?
  updatedUserId Int?

  createdUser User     @relation(name: "CreatedPrograms", fields: [createdUserId], references: [id])
  updatedUser User?    @relation(name: "UpdatedPrograms", fields: [updatedUserId], references: [id])
  classes     Class[]
  modules     Module[]
}

model Module {
  id            Int       @id @default(autoincrement())
  moduleName    String
  createdDate   DateTime  @default(now())
  createdUserId Int
  updatedDate   DateTime?
  updatedUserId Int?

  createdUser         User                 @relation(name: "CreatedModules", fields: [createdUserId], references: [id])
  updatedUser         User?                @relation(name: "UpdatedModules", fields: [updatedUserId], references: [id])
  programs            Program[]
  assignments         Assignment[]
  studentClassModules StudentClassModule[]
}

model StudentClassModule {
  moduleId    Int
  studentId   Int
  classId     Int
  moduleScore Int
  moduleLevel Int

  student Student @relation(fields: [studentId], references: [id])
  module  Module  @relation(fields: [moduleId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  @@id([moduleId, studentId, classId])
}

model Score {
  assignmentId   Int
  studentId      Int
  classId        Int
  scoreValue     Int
  submissionDate DateTime

  student    Student    @relation(fields: [studentId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])
  class      Class      @relation(fields: [classId], references: [id])

  @@id([assignmentId, studentId, classId])
}

model Assignment {
  id             Int       @id @default(autoincrement())
  moduleId       Int
  assignmentName String
  assignmentType String
  description    String
  createdDate    DateTime  @default(now())
  createdUserId  Int
  updatedDate    DateTime?
  updatedUserId  Int?

  createdUser User    @relation(name: "CreatedAssignments", fields: [createdUserId], references: [id])
  updatedUser User?   @relation(name: "UpdatedAssignments", fields: [updatedUserId], references: [id])
  module      Module  @relation(fields: [moduleId], references: [id])
  scores      Score[]
}

model Class {
  id            Int         @id @default(autoincrement())
  className     String      @unique
  startDate     DateTime
  endDate       DateTime?
  createdDate   DateTime    @default(now())
  createdUserId Int
  updatedDate   DateTime?
  updatedUserId Int?
  duration      String
  location      String
  status        ClassStatus
  programId     Int

  managers            User[]
  program             Program              @relation(fields: [programId], references: [id])
  createdUser         User                 @relation(name: "CreatedClasses", fields: [createdUserId], references: [id])
  updatedUser         User?                @relation(name: "UpdatedClasses", fields: [updatedUserId], references: [id])
  students            Student[]
  studentClasses      StudentClass[]
  reservations        Reservation[]
  studentClassModules StudentClassModule[]
  scores              Score[]
  emailRecipients     EmailRecipient[]
}

model EmailRecipient {
  id                   Int    @id @default(autoincrement())
  emailSendId          Int
  receiverStudentId    Int?
  receiverClassId      Int?
  receiverUserId       Int?
  receivedEmailAddress String

  emailSend       EmailSend @relation(fields: [emailSendId], references: [id])
  receiverStudent Student?  @relation(fields: [receiverStudentId], references: [id])
  receiverClass   Class?    @relation(fields: [receiverClassId], references: [id])
  receiverUser    User?     @relation(fields: [receiverUserId], references: [id])
}

model EmailSend {
  id              Int @id @default(autoincrement())
  emailTemplateId Int
  senderId        Int

  sender          User             @relation(fields: [senderId], references: [id])
  emailTemplate   EmailTemplate    @relation(fields: [emailTemplateId], references: [id])
  emailRecipients EmailRecipient[]
}

model EmailTemplate {
  id            Int       @id @default(autoincrement())
  type          String
  name          String
  content       String
  createdDate   DateTime  @default(now())
  createdUserId Int
  updatedDate   DateTime?
  updatedUserId Int?

  createdUser User        @relation(name: "CreatedEmailTemplates", fields: [createdUserId], references: [id])
  updatedUser User?       @relation(name: "UpdatedEmailTemplates", fields: [updatedUserId], references: [id])
  emailSends  EmailSend[]
}

model StudentClass {
  classId           Int
  studentId         Int
  attendingStatus   AttendingStatus
  certificateStatus CertificateStatus
  certificateDate   DateTime?

  class   Class   @relation(fields: [classId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@id([classId, studentId])
}

enum Gender {
  Male
  Female
  Other
}

enum StudentStatus {
  Active
  InActive
  Disable
}

enum ClassStatus {
  Active
  InActive
  Disable
}

enum AttendingStatus {
  InClass
  Reserve
  Finish
  DropOut
}

enum CertificateStatus {
  Enable
  Disable
}

enum Role {
  SuperAdmin
  ClassAdmin
  Trainer
}
